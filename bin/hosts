#!/usr/bin/python
# vim: set expandtab:
"""
**********************************************************************
GPL License
***********************************************************************
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.

***********************************************************************/

:author: David Wahlstrom
:email: david.wahlstrom@gmail.com

"""

import sys
import logging
import os
from pymongo import Connection
import json
import itertools
from ConfigParser import SafeConfigParser

parser = SafeConfigParser()
if os.path.isfile('/etc/ansible-hosts/ansible-hosts.conf'):
    config = '/etc/ansible-hosts/ansible-hosts.conf'
else:
    config = os.path.join(os.path.dirname(__file__), '../conf/ansible-hosts.conf')
parser.read(config)

mongodb_host = parser.get('ansible-hosts', 'host')
dbname = parser.get('ansible-hosts', 'database')
collection_name = parser.get('ansible-hosts', 'collection')

logging.basicConfig(level=logging.WARN,
                    format='%(asctime)s %(levelname)s - %(message)s',
                    datefmt='%y.%m.%d %H:%M:%S'
                   )
console = logging.StreamHandler(sys.stderr)
console.setLevel(logging.WARN)
logging.getLogger("ansible_mongo_hosts").addHandler(console)
log = logging.getLogger("ansible_mongo_hosts")

def configure():
    """Read configuration file and intialize connection to the mongodb instance"""
    log.debug('in configure')

    host = mongodb_host
    log.debug('connecting to mongodb host: %s' % host)
    database = dbname
    log.debug('connecting to database name: %s' % database)
    collection = collection_name
    log.debug('using collection name: %s' % collection)
    con = Connection(host)
    log.debug('selecting database/collection: %s/%s' % (database, collection))
    col = con[database][collection]
    return col

def get_hosts_from_group(allGroups, addedGroups, groupName):
    """Return a list of all hosts from the supplied group it's suplimental groups"""
    log.debug("in get_host_from_group(%s, %s)" % (allGroups, groupName))
    
    hosts = []
    
    group = {}
    for g in allGroups:
        if g['_id'] == groupName:
            group = g
    
    if not group:
        return []    
    
    hosts.extend(group['hosts'])
    
    for subGroup in group['groups']: 
        if subGroup not in addedGroups:
            addedGroups.append(subGroup)
            hosts.extend(get_hosts_from_group(allGroups, addedGroups, subGroup))
   
    return hosts

def hostlist(collection):
    """Grab all hosts/groups from the MongoDB"""
    log.debug("in hostlist()")

    cursor = collection.find()

    #pull in our results
    all_documents = []
    for doc in cursor:
        all_documents.append(doc)

    #create host groupings
    hostlistdict = {}
    for group in all_documents:
        hostlistdict[group['_id']] = []
    
    #populate the groups with hosts, tracking only 1 layer of groupings deep
    for group in all_documents:
        hosts = get_hosts_from_group(all_documents, [], group['_id'])
        hosts = filter(None, hosts)

        hostlistdict[group['_id']] = hosts

    return hostlistdict

if __name__ == "__main__":

    import argparse

    cmd_parser = argparse.ArgumentParser(description='Add hosts to the database (does not do grouping).')
    cmd_parser.add_argument('-l', '--list', dest='hostlist', action='store_true',
        help='List all hosts', default=None)
    cmd_parser.add_argument('-d', '--debug', dest='debug', action='store_true', help='Enable debugging during execution', default=None)
    args = cmd_parser.parse_args()

    if args.debug:
        log.setLevel(logging.DEBUG)

    if not args.hostlist:
        print "Please supply -l/--list"
        sys.exit(1)

    ansible_collection = configure()
    print json.dumps(hostlist(ansible_collection))
